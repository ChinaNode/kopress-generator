#!/usr/bin/env node
var program = require('commander');
var mkdirp = require('mkdirp');
var os = require('os');
var fs = require('fs');
var path = require('path');
var pkg = require('../package.json');
var version = pkg.version;

// CLI
program
  .version(version)
  .usage('[options] [dir]')
  .option('-j, --jade', 'add jade engine support (defaults to ejs)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

// Path
var destination_path = program.args.shift() || '.';

// end-of-line code
// var eol = os.EOL

program.template = 'ejs';
if (program.jade) program.template = 'jade';

// Generate application
(function createApplication(path) {
  emptyDirectory(path, function(empty){
    if (empty || program.force) {
      createApplicationAt(path);
    } else {
      program.confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(destination_path);


/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {
  process.on('exit', function(){
    console.log();
    console.log('   install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ node --harmony app.js');
    console.log();
  });

  mkdir(path, function(){
    mkdir(path + '/view', function () {
      
      switch (program.template) {
        case 'ejs':
          copy_template('ejs/index.ejs', path + '/view/index.ejs');
          break;
        case 'jade':
          copy_template('jade/index.jade', path + '/view/index.jade');
          copy_template('jade/layout.jade', path + '/view/layout.jade');
          break;
      }

    });

    mkdir(path + '/routes', function () {
      copy_template('routes/index.js', path + '/routes/index.js');
    });

    mkdir(path + '/public', function () {
      mkdir(path + '/public/css', function () {
        copy_template('css/style.css', path + '/public/css/style.css');
      });
      mkdir(path + '/public/js');
      mkdir(path + '/public/img');
    });

    copy_template('js/router.js', path + '/router.js');

    var kopress = fs.readFileSync(__dirname + '/../templates/js/kopress.js', 'utf-8');
    write(path + '/kopress.js', kopress.replace('{views}', program.template));

    copy_template('js/app.js', path + '/app.js');
    copy_template('js/package.json', path + '/package.json');

  });
}


function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */
function write(path, str, mode) {
  fs.writeFile(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
  console.error(str);
  process.exit(1);
}
